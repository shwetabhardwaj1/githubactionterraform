name: Terraform Azure Storage Deploy

on:
  push:
    branches:
      - main
    paths:
      - '**.tf'
      - '.terraform.lock.hcl'
      - '**/*.tfvars'

env:
  TF_VAR_environment: ${{ secrets.AZURE_ENVIRONMENT }}

jobs:
  terraform-plan:
    runs-on: ubuntu-latest
    environment: Dev-Plan
    defaults:
      run:
        working-directory: terraform
    env:
      TF_VAR_environment: ${{ secrets.AZURE_ENVIRONMENT }}
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      TF_VAR_client_id: ${{ secrets.AZURE_CLIENT_ID }}
      TF_VAR_client_secret: ${{ secrets.AZURE_CLIENT_SECRET }}
      TF_VAR_tenant_id: ${{ secrets.AZURE_TENANT_ID }}
      TF_VAR_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      TF_VAR_location: ${{ secrets.AZURE_LOCATION }}
      TF_VAR_resourceGroupName: ${{ secrets.AZURE_RESOURCE_GROUP_NAME }}
      TF_VAR_storageAccountName: ${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Cache Terraform plugins
        uses: actions/cache@v3
        with:
          path: terraform/.terraform
          key: ${{ runner.os }}-terraform-${{ hashFiles('**/.terraform.lock.hcl') }}
          restore-keys: |
            ${{ runner.os }}-terraform-

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Clean Terraform lock file
        run: rm -f .terraform.lock.hcl

      - name: Terraform Init
        run: terraform init -upgrade -backend-config="key=${TF_VAR_environment}.tfstate"

      - name: Check azurerm provider is locked
        run: |
          if grep -q "azurerm" .terraform.lock.hcl; then
            echo "azurerm provider is locked."
          else
            echo "azurerm provider is NOT locked!"
            exit 1
          fi
      - name: Remove old plan file (if exists)
        run: |
          if [ -f tfplan-${TF_VAR_environment}.out ]; then
            rm tfplan-${TF_VAR_environment}.out
          fi

      - name: Terraform Validate
        run: terraform validate
        continue-on-error: false

      - name: Terraform Plan
        run: terraform plan -out=tfplan-${TF_VAR_environment}.out

      - name: Show Terraform plan (human-readable)
        run: terraform show tfplan-${TF_VAR_environment}.out

      - name: Export Terraform plan to JSON
        run: terraform show -json tfplan-${TF_VAR_environment}.out > tfplan-${TF_VAR_environment}.json

      - name: Check if tfplan JSON exists
        run: |
          if test -f tfplan-${TF_VAR_environment}.json; then
            echo "Plan file exists!"
          else
            echo "Plan file NOT found!"
            exit 1
          fi

      - name: Upload tfplan files as artifact
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan-${{ env.TF_VAR_environment }}
          path: |
            terraform/tfplan-${{ env.TF_VAR_environment }}.out
            terraform/tfplan-${{ env.TF_VAR_environment }}.json
            terraform/.terraform.lock.hcl
          retention-days: 90

  terraform-apply:
    needs: terraform-plan
    environment: Dev
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: terraform
    env:
      TF_VAR_environment: ${{ secrets.AZURE_ENVIRONMENT }}
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      TF_VAR_client_id: ${{ secrets.AZURE_CLIENT_ID }}
      TF_VAR_client_secret: ${{ secrets.AZURE_CLIENT_SECRET }}
      TF_VAR_tenant_id: ${{ secrets.AZURE_TENANT_ID }}
      TF_VAR_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      TF_VAR_location: ${{ secrets.AZURE_LOCATION }}
      TF_VAR_resourceGroupName: ${{ secrets.AZURE_RESOURCE_GROUP_NAME }}
      TF_VAR_storageAccountName: ${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download tfplan artifact
        uses: actions/download-artifact@v4
        with:
          name: terraform-plan-${{ env.TF_VAR_environment }}
          path: terraform
      
      - name: Check azurerm provider is locked
        run: |
          find . -name ".terraform.lock.hcl"
          grep -q "registry.terraform.io/hashicorp/azurerm" .terraform.lock.hcl && echo "azurerm locked." || {
            echo "azurerm NOT locked!";
            exit 1;
          


      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan-${TF_VAR_environment}.out