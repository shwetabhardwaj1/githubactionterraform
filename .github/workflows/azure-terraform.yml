name: Terraform Azure Storage Deploy

on:
  push:
    branches:
      - main

jobs:
  terraform-plan:
    runs-on: ubuntu-latest
    environment: Dev  # This ties the job to the 'Dev' environment in your repo
    defaults:
      run:
        working-directory: terraform
    env:
      # Auth for Azure backend
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Vars for Terraform config
      TF_VAR_client_id: ${{ secrets.AZURE_CLIENT_ID }}
      TF_VAR_client_secret: ${{ secrets.AZURE_CLIENT_SECRET }}
      TF_VAR_tenant_id: ${{ secrets.AZURE_TENANT_ID }}
      TF_VAR_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      TF_VAR_location: ${{ secrets.AZURE_LOCATION }}
      TF_VAR_resourceGroupName: ${{ secrets.AZURE_RESOURCE_GROUP_NAME }}
      TF_VAR_storageAccountName: ${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }}
      TF_VAR_environment: ${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }}
      
      

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Print Azure Secrets (for debug only)
        run: |
          echo "Client ID: $TF_VAR_client_id"
          echo "Tenant ID: $TF_VAR_tenant_id"

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: terraform init -backend-config="key=${{ env.TF_VAR_environment }}.tfstate"
        env:
           TF_VAR_environment: dev

      - name: Terraform Validate
        run: terraform validate
        continue-on-error: false

      - name: Terraform Plan
        run: terraform plan -out=tfplan-${{ env.TF_VAR_environment }}.out

      - name: Show Terraform plan (human-readable)
        run: terraform show tfplan-${{ env.TF_VAR_environment }}.out


      - name: Export Terraform plan to JSON
        run: terraform show -json tfplan-${{ env.TF_VAR_environment }}.out > tfplan-${{ env.TF_VAR_environment }}.json

      - name: Check if plan JSON exists
        run: test -f tfplan-${{ env.TF_VAR_environment }}.json

      - name: Upload tfplan.json as artifact
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan-${{ env.TF_VAR_environment }}
          path: tfplan-${{ env.TF_VAR_environment }}.json
          retention-days: 90

  terraform-apply:
    needs: terraform-plan  #  Ensures planning completes first
    environment: Dev       #  Triggers approval gate if reviewers are set in Dev
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: terraform
    env:
      # Auth for Azure backend
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Vars for Terraform config
      TF_VAR_client_id: ${{ secrets.AZURE_CLIENT_ID }}
      TF_VAR_client_secret: ${{ secrets.AZURE_CLIENT_SECRET }}
      TF_VAR_tenant_id: ${{ secrets.AZURE_TENANT_ID }}
      TF_VAR_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      TF_VAR_location: ${{ secrets.AZURE_LOCATION }}
      TF_VAR_resourceGroupName: ${{ secrets.AZURE_RESOURCE_GROUP_NAME }}
      TF_VAR_storageAccountName: ${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }}
      TF_VAR_environment: ${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Apply
        run: terraform apply -auto-approve "tfplan-${{ env.TF_VAR_environment }}.out"

