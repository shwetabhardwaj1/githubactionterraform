name: Terraform Azure Storage Deploy

on:
  push:
    branches:
      - main
    paths:
      - '**.tf'
      - '.terraform.lock.hcl'
      - '**/*.tfvars'
      - '.cs*'

env:
  TF_VAR_environment: ${{ secrets.AZURE_ENVIRONMENT }}

jobs:
  terraform-plan:
    runs-on: ubuntu-latest
    environment: Dev-Plan
    defaults:
      run:
        working-directory: terraform
    env:
      TF_VAR_environment: ${{ secrets.AZURE_ENVIRONMENT }}
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      TF_VAR_client_id: ${{ secrets.AZURE_CLIENT_ID }}
      TF_VAR_client_secret: ${{ secrets.AZURE_CLIENT_SECRET }}
      TF_VAR_tenant_id: ${{ secrets.AZURE_TENANT_ID }}
      TF_VAR_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      TF_VAR_location: ${{ secrets.AZURE_LOCATION }}
      TF_VAR_resourceGroupName: ${{ secrets.AZURE_RESOURCE_GROUP_NAME }}
      TF_VAR_storageAccountName: ${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }}
      AZURE_FUNCTION_APP_NAME: ${{ secrets.AZURE_FUNCTION_APP_NAME }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Cache Terraform plugins
        uses: actions/cache@v3
        with:
          path: terraform/.terraform
          key: ${{ runner.os }}-terraform-${{ hashFiles('**/.terraform.lock.hcl') }}
          restore-keys: |
            ${{ runner.os }}-terraform-

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Clean Terraform lock file
        run: rm -f .terraform.lock.hcl

      - name: Terraform Init
        run: terraform init -upgrade -backend-config="key=${TF_VAR_environment}.tfstate"

      
            
      - name: Debug Terraform folder
        run: |
          echo "Current location and files:"
          pwd
          ls -la
          echo "Inspecting terraform subfolder:"
          ls -la ..

      - name: Confirm lock file presence
        run: |
          echo "Current directory: $(pwd)"
          echo "Expected lock file location: $(pwd)/.terraform.lock.hcl"

          if [ ! -f ".terraform.lock.hcl" ]; then
            echo "Lock file not found at $(pwd)/.terraform.lock.hcl"
            echo "Re-running terraform init to generate lock file..."
            terraform init -backend-config="key=${TF_VAR_environment}.tfstate"
          fi

          if [ ! -f ".terraform.lock.hcl" ]; then
            echo "Still missing after init. Exiting safely."

          exit 1
          else
          echo Lock file found!
          fi
      - name: Remove old plan file (if exists)
        run: |
          if [ -f tfplan-${TF_VAR_environment}.out ]; then
            rm tfplan-${TF_VAR_environment}.out
          fi

      - name: Terraform Validate
        run: terraform validate
        continue-on-error: false

      - name: Terraform Plan
        run: terraform plan -out=tfplan-${TF_VAR_environment}.out

      - name: Show Terraform plan (human-readable)
        run: terraform show tfplan-${TF_VAR_environment}.out

      - name: Export Terraform plan to JSON
        run: terraform show -json tfplan-${TF_VAR_environment}.out > tfplan-${TF_VAR_environment}.json

      - name: Check if tfplan JSON exists
        run: |
          if test -f tfplan-${TF_VAR_environment}.json; then
            echo "Plan file exists!"
          else
            echo "Plan file NOT found!"
            exit 1
          fi
    

      - name: Upload tfplan files as artifact
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan-${{ env.TF_VAR_environment }}
          path: |
            terraform/tfplan-${{ env.TF_VAR_environment }}.out
            terraform/tfplan-${{ env.TF_VAR_environment }}.json
          retention-days: 90

      - name: Verify lock file before upload
        run: |
         echo "Listing all files in current directory:"
         ls -la

         echo "Current directory: $(pwd)"
         echo "Checking lock file presence:"
         ls -l .terraform.lock.hcl


      - name: Upload lock file
        if: ${{ env.TF_VAR_environment }}
        uses: actions/upload-artifact@v4
        with:
         name: terraform-lock-${{ env.TF_VAR_environment }}
         path: terraform/.terraform.lock.hcl
         include-hidden-files: true

     
      - name: Verify lock file after upload
        run: |
         echo "Listing all files in current directory:"
         ls -la

         echo "Current directory: $(pwd)"
         echo "Checking lock file presence:"
         ls -l .terraform.lock.hcl

  terraform-apply:
    needs: terraform-plan
    environment: Dev
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: terraform
    env:
      TF_VAR_environment: ${{ secrets.AZURE_ENVIRONMENT }}
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      TF_VAR_client_id: ${{ secrets.AZURE_CLIENT_ID }}
      TF_VAR_client_secret: ${{ secrets.AZURE_CLIENT_SECRET }}
      TF_VAR_tenant_id: ${{ secrets.AZURE_TENANT_ID }}
      TF_VAR_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      TF_VAR_location: ${{ secrets.AZURE_LOCATION }}
      TF_VAR_resourceGroupName: ${{ secrets.AZURE_RESOURCE_GROUP_NAME }}
      TF_VAR_storageAccountName: ${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }}
      

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Verify file list before artifa download
        run: |
         echo "Listing all files in current directory:"
         ls -la

         echo "Current directory: $(pwd)"
      

      - name: Download tfplan artifact
        uses: actions/download-artifact@v4
        with:
          name: terraform-plan-${{ env.TF_VAR_environment }}
          path: terraform/

      - name: Download lock file artifact
        uses: actions/download-artifact@v4
        with:
         name: terraform-lock-${{ env.TF_VAR_environment }}
         path: terraform/


      - name: List files in directory after Artifact Download  # Helps confirm lock file is there
        run: ls -al


      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: terraform init -input=false -backend-config="key=${TF_VAR_environment}.tfstate"
        
      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan-${TF_VAR_environment}.out

  function-apply:
      needs: terraform-apply
      environment: Dev
      runs-on: ubuntu-latest
      defaults: 
        run:
          working-directory: FunctionApps/MyFunctionApp


      steps:
        - name: Checkout code
          uses: actions/checkout@v3

        - name: Setup .NET
          uses: actions/setup-dotnet@v3
          with:
            dotnet-version: '8.0.x' # Adjust if you are using a different version

        - name: Restore dependencies
          run: dotnet restore

        - name: Build function app
          run: dotnet build --configuration Release

        - name: Publish function app
          run: dotnet publish --configuration Release --output ./publish
          working-directory: FunctionApps/MyFunctionApp

        - name: Azure CLI Login
          run: |
            az login --service-principal \
             --username ${{ secrets.AZURE_CLIENT_ID }} \
             --password ${{ secrets.AZURE_CLIENT_SECRET }} \
             --tenant ${{ secrets.AZURE_TENANT_ID }}
            
          env:
            AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
            AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
            AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
            

        - name: Deploy to Azure Function App
          uses: azure/functions-action@v1
          with:
           app-name: ${{ secrets.AZURE_FUNCTION_APP_NAME }}
           package: ./publish

        - name: Set App Settings on Function App
          run: |
            az functionapp config appsettings set \
             --name ${{ secrets.AZURE_FUNCTION_APP_NAME }} \
             --resource-group ${{ secrets.AZURE_RESOURCE_GROUP_NAME }} \
             --settings \
               MySettingName=MySettingValue \
               FUNCTIONS_WORKER_RUNTIME=dotnet-isolated 
               

